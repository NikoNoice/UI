-- Neon UI Library v2.0 - Professional Edition
-- LoadString-Ready Cheat Menu Interface

local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Constants
local GLOW_ASSET = "rbxassetid://18245826428"
local SPECTRUM_GRADIENT = "rbxassetid://6976876787"
local HUE_GRADIENT = "rbxassetid://6941137543"

-- Professional Theme
local Theme = {
    Background = Color3.fromRGB(25, 27, 33),
    SecondaryBackground = Color3.fromRGB(30, 32, 38),
    TertiaryBackground = Color3.fromRGB(35, 37, 43),
    ElementBackground = Color3.fromRGB(40, 42, 48),
    Accent = Color3.fromRGB(88, 101, 242),
    AccentDim = Color3.fromRGB(71, 82, 196),
    Text = Color3.fromRGB(210, 211, 215),
    DimText = Color3.fromRGB(130, 134, 143),
    Border = Color3.fromRGB(48, 50, 56),
    Success = Color3.fromRGB(67, 181, 129),
    Error = Color3.fromRGB(240, 71, 71),
    GlowTransparency = 0.95,
    Font = Enum.Font.Gotham
}

-- Utility Functions
local function Tween(instance, properties, duration)
    TweenService:Create(instance, TweenInfo.new(duration or 0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), properties):Play()
end

local function Create(class, properties)
    local instance = Instance.new(class)
    for k, v in pairs(properties) do
        if k ~= "Parent" then
            instance[k] = v
        end
    end
    if properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function AddGlow(parent, color, transparency, size)
    return Create("ImageLabel", {
        Parent = parent,
        Image = GLOW_ASSET,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(21, 21, 79, 79),
        ImageColor3 = color or Theme.Accent,
        ImageTransparency = transparency or Theme.GlowTransparency,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -(size or 15), 0, -(size or 15)),
        Size = UDim2.new(1, (size or 15) * 2, 1, (size or 15) * 2),
        ZIndex = parent.ZIndex - 1
    })
end

local function MakeDraggable(frame, handle)
    local dragging, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Main Library
function Library:Create()
    local ui = setmetatable({
        Tabs = {},
        Binds = {},
        ConfigPath = "NeonUI/Configs/",
        CurrentConfig = nil,
        Watermark = nil,
        BindList = nil
    }, Library)
    
    -- Create main GUI
    ui.ScreenGui = Create("ScreenGui", {
        Parent = CoreGui,
        Name = "NeonUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    -- Main Frame
    ui.MainFrame = Create("Frame", {
        Parent = ui.ScreenGui,
        Size = UDim2.new(0, 550, 0, 350),
        Position = UDim2.new(0.5, -275, 0.5, -175),
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        Parent = ui.MainFrame,
        CornerRadius = UDim.new(0, 6)
    })
    
    -- Add subtle border
    Create("UIStroke", {
        Parent = ui.MainFrame,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.5
    })
    
    -- Top Bar
    ui.TopBar = Create("Frame", {
        Parent = ui.MainFrame,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Theme.SecondaryBackground,
        BorderSizePixel = 0
    })
    
    -- Title
    ui.Title = Create("TextLabel", {
        Parent = ui.TopBar,
        Size = UDim2.new(0.3, 0, 1, 0),
        Position = UDim2.new(0, 12, 0, 0),
        Text = "Neon UI",
        TextColor3 = Theme.Text,
        TextScaled = false,
        TextSize = 14,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    -- Tab Container
    ui.TabContainer = Create("Frame", {
        Parent = ui.MainFrame,
        Size = UDim2.new(0.25, 0, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Theme.SecondaryBackground,
        BorderSizePixel = 0
    })
    
    Create("UIListLayout", {
        Parent = ui.TabContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 0)
    })
    
    -- Content Container
    ui.ContentContainer = Create("Frame", {
        Parent = ui.MainFrame,
        Size = UDim2.new(0.75, -1, 1, -30),
        Position = UDim2.new(0.25, 1, 0, 30),
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0
    })
    
    -- Separator
    Create("Frame", {
        Parent = ui.MainFrame,
        Size = UDim2.new(0, 1, 1, -30),
        Position = UDim2.new(0.25, 0, 0, 30),
        BackgroundColor3 = Theme.Border,
        BorderSizePixel = 0
    })
    
    -- Make draggable
    MakeDraggable(ui.MainFrame, ui.TopBar)
    
    return ui
end

-- Tab System
function Library:CreateTab(name)
    local tab = {
        Name = name,
        Button = nil,
        Container = nil,
        Elements = {}
    }
    
    -- Tab Button
    tab.Button = Create("TextButton", {
        Parent = self.TabContainer,
        Size = UDim2.new(1, 0, 0, 35),
        Text = "",
        BackgroundColor3 = Theme.SecondaryBackground,
        BorderSizePixel = 0,
        AutoButtonColor = false
    })
    
    local tabLabel = Create("TextLabel", {
        Parent = tab.Button,
        Size = UDim2.new(1, -24, 1, 0),
        Position = UDim2.new(0, 12, 0, 0),
        Text = name,
        TextColor3 = Theme.DimText,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    -- Tab Content
    tab.Container = Create("ScrollingFrame", {
        Parent = self.ContentContainer,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Theme.Accent,
        BorderSizePixel = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = #self.Tabs == 0
    })
    
    Create("UIPadding", {
        Parent = tab.Container,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    Create("UIListLayout", {
        Parent = tab.Container,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 6)
    })
    
    -- Tab Selection
    tab.Button.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            t.Container.Visible = false
            t.Button.BackgroundColor3 = Theme.SecondaryBackground
            t.Button:FindFirstChildOfClass("TextLabel").TextColor3 = Theme.DimText
        end
        
        tab.Container.Visible = true
        tab.Button.BackgroundColor3 = Theme.TertiaryBackground
        tabLabel.TextColor3 = Theme.Text
        
        -- Add accent indicator
        local indicator = tab.Button:FindFirstChild("Indicator")
        if not indicator then
            indicator = Create("Frame", {
                Name = "Indicator",
                Parent = tab.Button,
                Size = UDim2.new(0, 2, 0.6, 0),
                Position = UDim2.new(0, 0, 0.2, 0),
                BackgroundColor3 = Theme.Accent,
                BorderSizePixel = 0
            })
        end
    end)
    
    -- Auto-resize content
    local function UpdateCanvas()
        local layout = tab.Container:FindFirstChildOfClass("UIListLayout")
        if layout then
            tab.Container.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
        end
    end
    
    tab.Container.ChildAdded:Connect(UpdateCanvas)
    tab.Container.ChildRemoved:Connect(UpdateCanvas)
    
    table.insert(self.Tabs, tab)
    
    if #self.Tabs == 1 then
        tab.Button:FindFirstChildOfClass("TextLabel").TextColor3 = Theme.Text
        tab.Button.BackgroundColor3 = Theme.TertiaryBackground
        Create("Frame", {
            Name = "Indicator",
            Parent = tab.Button,
            Size = UDim2.new(0, 2, 0.6, 0),
            Position = UDim2.new(0, 0, 0.2, 0),
            BackgroundColor3 = Theme.Accent,
            BorderSizePixel = 0
        })
    end
    
    return tab
end

-- Section System
function Library:CreateSection(parent, name)
    local section = {
        Container = Create("Frame", {
            Parent = parent.Container,
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundTransparency = 1,
            BorderSizePixel = 0
        })
    }
    
    Create("TextLabel", {
        Parent = section.Container,
        Size = UDim2.new(1, 0, 0, 20),
        Text = name,
        TextColor3 = Theme.DimText,
        TextSize = 12,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    section.Content = Create("Frame", {
        Parent = section.Container,
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundTransparency = 1
    })
    
    local layout = Create("UIListLayout", {
        Parent = section.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 6)
    })
    
    -- Auto-resize
    local function UpdateSize()
        section.Container.Size = UDim2.new(1, 0, 0, 25 + layout.AbsoluteContentSize.Y)
        section.Content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
    end
    
    section.Content.ChildAdded:Connect(UpdateSize)
    section.Content.ChildRemoved:Connect(UpdateSize)
    
    return section
end

-- Toggle Widget
function Library:CreateToggle(parent, name, default, callback)
    local toggle = {
        Value = default or false,
        Callback = callback or function() end
    }
    
    toggle.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 22),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = toggle.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = toggle.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local label = Create("TextLabel", {
        Parent = toggle.Container,
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local switchFrame = Create("Frame", {
        Parent = toggle.Container,
        Size = UDim2.new(0, 34, 0, 14),
        Position = UDim2.new(1, -40, 0.5, -7),
        BackgroundColor3 = Theme.TertiaryBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = switchFrame,
        CornerRadius = UDim.new(0.5, 0)
    })
    
    local indicator = Create("Frame", {
        Parent = switchFrame,
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0, 1, 0.5, -6),
        BackgroundColor3 = Theme.DimText,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = indicator,
        CornerRadius = UDim.new(0.5, 0)
    })
    
    local function SetState(state)
        toggle.Value = state
        if state then
            Tween(switchFrame, {BackgroundColor3 = Theme.Accent}, 0.15)
            Tween(indicator, {Position = UDim2.new(1, -13, 0.5, -6), BackgroundColor3 = Color3.new(1,1,1)}, 0.15)
        else
            Tween(switchFrame, {BackgroundColor3 = Theme.TertiaryBackground}, 0.15)
            Tween(indicator, {Position = UDim2.new(0, 1, 0.5, -6), BackgroundColor3 = Theme.DimText}, 0.15)
        end
        toggle.Callback(state)
    end
    
    toggle.Container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            SetState(not toggle.Value)
        end
    end)
    
    SetState(default)
    toggle.SetState = SetState
    
    return toggle
end

-- Slider Widget
function Library:CreateSlider(parent, name, min, max, step, default, callback)
    local slider = {
        Value = default or min,
        Min = min,
        Max = max,
        Step = step,
        Callback = callback or function() end
    }
    
    slider.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 38),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = slider.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = slider.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local info = Create("Frame", {
        Parent = slider.Container,
        Size = UDim2.new(1, -16, 0, 20),
        Position = UDim2.new(0, 8, 0, 2),
        BackgroundTransparency = 1
    })
    
    local label = Create("TextLabel", {
        Parent = info,
        Size = UDim2.new(0.7, 0, 1, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local valueLabel = Create("TextLabel", {
        Parent = info,
        Size = UDim2.new(0.3, 0, 1, 0),
        Position = UDim2.new(0.7, 0, 0, 0),
        Text = tostring(default),
        TextColor3 = Theme.Accent,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Right,
        BackgroundTransparency = 1
    })
    
    local sliderBar = Create("Frame", {
        Parent = slider.Container,
        Size = UDim2.new(1, -16, 0, 3),
        Position = UDim2.new(0, 8, 1, -10),
        BackgroundColor3 = Theme.TertiaryBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = sliderBar,
        CornerRadius = UDim.new(0.5, 0)
    })
    
    local fill = Create("Frame", {
        Parent = sliderBar,
        Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = Theme.Accent,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = fill,
        CornerRadius = UDim.new(0.5, 0)
    })
    
    local handle = Create("Frame", {
        Parent = sliderBar,
        Size = UDim2.new(0, 10, 0, 10),
        Position = UDim2.new((default - min) / (max - min), -5, 0.5, -5),
        BackgroundColor3 = Theme.Accent,
        BorderSizePixel = 0,
        ZIndex = 2
    })
    
    Create("UICorner", {
        Parent = handle,
        CornerRadius = UDim.new(0.5, 0)
    })
    
    local dragging = false
    
    local function UpdateValue(input)
        local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
        local value = math.floor((min + (max - min) * relativeX) / step + 0.5) * step
        
        slider.Value = value
        valueLabel.Text = tostring(value)
        
        Tween(handle, {Position = UDim2.new(relativeX, -5, 0.5, -5)}, 0.05)
        Tween(fill, {Size = UDim2.new(relativeX, 0, 1, 0)}, 0.05)
        
        slider.Callback(value)
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            handle.BackgroundColor3 = Theme.AccentDim
        end
    end)
    
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            UpdateValue(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateValue(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            handle.BackgroundColor3 = Theme.Accent
        end
    end)
    
    slider.SetValue = function(value)
        slider.Value = value
        valueLabel.Text = tostring(value)
        local relativeX = (value - min) / (max - min)
        handle.Position = UDim2.new(relativeX, -5, 0.5, -5)
        fill.Size = UDim2.new(relativeX, 0, 1, 0)
    end
    
    return slider
end

-- Dropdown Widget
function Library:CreateDropdown(parent, name, options, default, callback)
    local dropdown = {
        Value = default or options[1],
        Options = options,
        Callback = callback or function() end,
        Open = false
    }
    
    dropdown.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 32),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0,
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        Parent = dropdown.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = dropdown.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local main = Create("TextButton", {
        Parent = dropdown.Container,
        Size = UDim2.new(1, 0, 0, 32),
        Text = "",
        BackgroundTransparency = 1,
        BorderSizePixel = 0
    })
    
    local label = Create("TextLabel", {
        Parent = main,
        Size = UDim2.new(0.5, 0, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local selected = Create("TextLabel", {
        Parent = main,
        Size = UDim2.new(0.5, -30, 1, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        Text = dropdown.Value,
        TextColor3 = Theme.DimText,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Right,
        BackgroundTransparency = 1
    })
    
    local arrow = Create("TextLabel", {
        Parent = main,
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0.5, -10),
        Text = "▼",
        TextColor3 = Theme.DimText,
        TextSize = 10,
        Font = Theme.Font,
        BackgroundTransparency = 1
    })
    
    local optionFrame = Create("Frame", {
        Parent = dropdown.Container,
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 0, 32),
        BackgroundColor3 = Theme.TertiaryBackground,
        BorderSizePixel = 0
    })
    
    Create("UIListLayout", {
        Parent = optionFrame,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 0)
    })
    
    for _, option in ipairs(options) do
        local optionButton = Create("TextButton", {
            Parent = optionFrame,
            Size = UDim2.new(1, 0, 0, 24),
            Text = option,
            TextColor3 = Theme.DimText,
            TextSize = 12,
            Font = Theme.Font,
            BackgroundColor3 = Theme.TertiaryBackground,
            BorderSizePixel = 0,
            AutoButtonColor = false
        })
        
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundColor3 = Theme.ElementBackground
            optionButton.TextColor3 = Theme.Text
        end)
        
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundColor3 = Theme.TertiaryBackground
            optionButton.TextColor3 = Theme.DimText
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            dropdown.Value = option
            selected.Text = option
            dropdown.Callback(option)
            dropdown.Open = false
            Tween(dropdown.Container, {Size = UDim2.new(1, 0, 0, 32)}, 0.15)
            Tween(arrow, {Rotation = 0}, 0.15)
        end)
    end
    
    main.MouseButton1Click:Connect(function()
        dropdown.Open = not dropdown.Open
        if dropdown.Open then
            Tween(dropdown.Container, {Size = UDim2.new(1, 0, 0, 32 + #options * 24)}, 0.15)
            Tween(arrow, {Rotation = 180}, 0.15)
        else
            Tween(dropdown.Container, {Size = UDim2.new(1, 0, 0, 32)}, 0.15)
            Tween(arrow, {Rotation = 0}, 0.15)
        end
    end)
    
    return dropdown
end

-- Textbox Widget
function Library:CreateTextbox(parent, name, default, callback)
    local textbox = {
        Value = default or "",
        Callback = callback or function() end
    }
    
    textbox.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 32),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = textbox.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = textbox.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local label = Create("TextLabel", {
        Parent = textbox.Container,
        Size = UDim2.new(0.4, 0, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local input = Create("TextBox", {
        Parent = textbox.Container,
        Size = UDim2.new(0.55, 0, 0, 20),
        Position = UDim2.new(0.42, 0, 0.5, -10),
        Text = default,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        BackgroundColor3 = Theme.TertiaryBackground,
        BorderSizePixel = 0,
        ClearTextOnFocus = false
    })
    
    Create("UICorner", {
        Parent = input,
        CornerRadius = UDim.new(0, 3)
    })
    
    Create("UIPadding", {
        Parent = input,
        PaddingLeft = UDim.new(0, 6),
        PaddingRight = UDim.new(0, 6)
    })
    
    input.FocusLost:Connect(function()
        textbox.Value = input.Text
        textbox.Callback(input.Text)
    end)
    
    return textbox
end

-- Button Widget
function Library:CreateButton(parent, name, callback)
    local button = {
        Callback = callback or function() end
    }
    
    button.Container = Create("TextButton", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 28),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0,
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        Parent = button.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = button.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    button.Container.MouseEnter:Connect(function()
        Tween(button.Container, {BackgroundColor3 = Theme.TertiaryBackground}, 0.1)
    end)
    
    button.Container.MouseLeave:Connect(function()
        Tween(button.Container, {BackgroundColor3 = Theme.ElementBackground}, 0.1)
    end)
    
    button.Container.MouseButton1Click:Connect(function()
        button.Callback()
        
        -- Click effect
        local effect = Create("Frame", {
            Parent = button.Container,
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            BackgroundColor3 = Theme.Accent,
            BackgroundTransparency = 0.5,
            BorderSizePixel = 0,
            ZIndex = 2
        })
        
        Create("UICorner", {
            Parent = effect,
            CornerRadius = UDim.new(0, 4)
        })
        
        Tween(effect, {Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 1}, 0.3)
        wait(0.3)
        effect:Destroy()
    end)
    
    return button
end

-- Color Picker Widget (Simplified)
function Library:CreateColorPicker(parent, name, default, callback)
    local picker = {
        Value = default or Color3.fromRGB(255, 255, 255),
        Callback = callback or function() end
    }
    
    picker.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 22),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = picker.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = picker.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local label = Create("TextLabel", {
        Parent = picker.Container,
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local colorDisplay = Create("Frame", {
        Parent = picker.Container,
        Size = UDim2.new(0, 30, 0, 14),
        Position = UDim2.new(1, -36, 0.5, -7),
        BackgroundColor3 = default,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = colorDisplay,
        CornerRadius = UDim.new(0, 3)
    })
    
    Create("UIStroke", {
        Parent = colorDisplay,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    -- Simplified color picker (opens external window)
    colorDisplay.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            -- Create color picker window
            local pickerWindow = Create("Frame", {
                Parent = self.ScreenGui,
                Size = UDim2.new(0, 170, 0, 190),
                Position = UDim2.new(0, colorDisplay.AbsolutePosition.X - 170, 0, colorDisplay.AbsolutePosition.Y),
                BackgroundColor3 = Theme.SecondaryBackground,
                BorderSizePixel = 0,
                ZIndex = 20
            })
            
            Create("UICorner", {
                Parent = pickerWindow,
                CornerRadius = UDim.new(0, 4)
            })
            
            Create("UIStroke", {
                Parent = pickerWindow,
                Color = Theme.Border,
                Thickness = 1
            })
            
            -- Color spectrum
            local spectrum = Create("ImageLabel", {
                Parent = pickerWindow,
                Size = UDim2.new(1, -20, 0, 120),
                Position = UDim2.new(0, 10, 0, 10),
                Image = "rbxassetid://" .. SPECTRUM_GRADIENT,
                BorderSizePixel = 0
            })
            
            Create("UICorner", {
                Parent = spectrum,
                CornerRadius = UDim.new(0, 3)
            })
            
            -- Hue slider
            local hueSlider = Create("ImageLabel", {
                Parent = pickerWindow,
                Size = UDim2.new(1, -20, 0, 10),
                Position = UDim2.new(0, 10, 0, 140),
                Image = "rbxassetid://" .. HUE_GRADIENT,
                BorderSizePixel = 0
            })
            
            Create("UICorner", {
                Parent = hueSlider,
                CornerRadius = UDim.new(0, 3)
            })
            
            -- Apply button
            local applyButton = Create("TextButton", {
                Parent = pickerWindow,
                Size = UDim2.new(1, -20, 0, 22),
                Position = UDim2.new(0, 10, 1, -30),
                Text = "Apply",
                TextColor3 = Theme.Text,
                TextSize = 12,
                Font = Theme.Font,
                BackgroundColor3 = Theme.Accent,
                BorderSizePixel = 0
            })
            
            Create("UICorner", {
                Parent = applyButton,
                CornerRadius = UDim.new(0, 3)
            })
            
            -- Basic color picker logic
            local h, s, v = Color3.toHSV(picker.Value)
            
            spectrum.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    local conn
                    local function update()
                        local relX = math.clamp((inp.Position.X - spectrum.AbsolutePosition.X) / spectrum.AbsoluteSize.X, 0, 1)
                        local relY = math.clamp((inp.Position.Y - spectrum.AbsolutePosition.Y) / spectrum.AbsoluteSize.Y, 0, 1)
                        s = relX
                        v = 1 - relY
                        picker.Value = Color3.fromHSV(h, s, v)
                        colorDisplay.BackgroundColor3 = picker.Value
                    end
                    update()
                    conn = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            update()
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            conn:Disconnect()
                        end
                    end)
                end
            end)
            
            hueSlider.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    local conn
                    local function update()
                        local relX = math.clamp((inp.Position.X - hueSlider.AbsolutePosition.X) / hueSlider.AbsoluteSize.X, 0, 1)
                        h = relX
                        picker.Value = Color3.fromHSV(h, s, v)
                        colorDisplay.BackgroundColor3 = picker.Value
                    end
                    update()
                    conn = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            update()
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            conn:Disconnect()
                        end
                    end)
                end
            end)
            
            applyButton.MouseButton1Click:Connect(function()
                picker.Callback(picker.Value)
                pickerWindow:Destroy()
            end)
            
            -- Close on outside click
            UserInputService.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    wait()
                    local mouse = inp.Position
                    local windowPos = pickerWindow.AbsolutePosition
                    local windowSize = pickerWindow.AbsoluteSize
                    
                    if mouse.X < windowPos.X or mouse.X > windowPos.X + windowSize.X or
                       mouse.Y < windowPos.Y or mouse.Y > windowPos.Y + windowSize.Y then
                        pickerWindow:Destroy()
                    end
                end
            end)
        end
    end)
    
    return picker
end

-- Keybind Widget
function Library:CreateKeybind(parent, name, default, callback)
    local keybind = {
        Key = default or Enum.KeyCode.Unknown,
        Callback = callback or function() end,
        Active = false,
        Mode = "Toggle"
    }
    
    keybind.Container = Create("Frame", {
        Parent = parent.Content or parent.Container,
        Size = UDim2.new(1, 0, 0, 22),
        BackgroundColor3 = Theme.ElementBackground,
        BorderSizePixel = 0
    })
    
    Create("UICorner", {
        Parent = keybind.Container,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = keybind.Container,
        Color = Theme.Border,
        Thickness = 1,
        Transparency = 0.8
    })
    
    local label = Create("TextLabel", {
        Parent = keybind.Container,
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Text = name,
        TextColor3 = Theme.Text,
        TextSize = 13,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local keyButton = Create("TextButton", {
        Parent = keybind.Container,
        Size = UDim2.new(0, 50, 0, 14),
        Position = UDim2.new(1, -56, 0.5, -7),
        Text = default and default.Name or "None",
        TextColor3 = Theme.DimText,
        TextSize = 11,
        Font = Theme.Font,
        BackgroundColor3 = Theme.TertiaryBackground,
        BorderSizePixel = 0,
        AutoButtonColor = false
    })
    
    Create("UICorner", {
        Parent = keyButton,
        CornerRadius = UDim.new(0, 3)
    })
    
    local binding = false
    
    keyButton.MouseButton1Click:Connect(function()
        binding = true
        keyButton.Text = "..."
        keyButton.TextColor3 = Theme.Accent
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if binding then
            if input.KeyCode ~= Enum.KeyCode.Unknown then
                keybind.Key = input.KeyCode
                keyButton.Text = input.KeyCode.Name
                keyButton.TextColor3 = Theme.DimText
                binding = false
            end
        elseif input.KeyCode == keybind.Key and not binding then
            if keybind.Mode == "Toggle" then
                keybind.Active = not keybind.Active
                keybind.Callback(keybind.Active)
            elseif keybind.Mode == "Hold" then
                keybind.Active = true
                keybind.Callback(true)
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == keybind.Key and keybind.Mode == "Hold" then
            keybind.Active = false
            keybind.Callback(false)
        end
    end)
    
    return keybind
end

-- Notification System
function Library:Notify(title, text, duration)
    local notification = Create("Frame", {
        Parent = self.ScreenGui,
        Size = UDim2.new(0, 300, 0, 60),
        Position = UDim2.new(1, -320, 1, -80),
        BackgroundColor3 = Theme.SecondaryBackground,
        BorderSizePixel = 0,
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        Parent = notification,
        CornerRadius = UDim.new(0, 4)
    })
    
    Create("UIStroke", {
        Parent = notification,
        Color = Theme.Accent,
        Thickness = 1,
        Transparency = 0.5
    })
    
    local titleLabel = Create("TextLabel", {
        Parent = notification,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 10, 0, 5),
        Text = title,
        TextColor3 = Theme.Accent,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    local textLabel = Create("TextLabel", {
        Parent = notification,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 10, 0, 25),
        Text = text,
        TextColor3 = Theme.Text,
        TextSize = 12,
        Font = Theme.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1
    })
    
    -- Animation
    notification.Position = UDim2.new(1, 0, 1, -80)
    Tween(notification, {Position = UDim2.new(1, -320, 1, -80)}, 0.3)
    
    wait(duration or 3)
    
    Tween(notification, {Position = UDim2.new(1, 0, 1, -80)}, 0.3)
    wait(0.3)
    notification:Destroy()
end

-- Settings Tab
function Library:CreateSettingsTab()
    local tab = self:CreateTab("Settings")
    
    local uiSection = self:CreateSection(tab, "UI Settings")
    
    self:CreateButton(uiSection, "Unload UI", function()
        self:Destroy()
    end)
    
    self:CreateToggle(uiSection, "Show Watermark", true, function(state)
        if self.Watermark then
            self.Watermark.Visible = state
        end
    end)
    
    self:CreateToggle(uiSection, "Show Keybinds", true, function(state)
        if self.BindList then
            self.BindList.Visible = state
        end
    end)
    
    local themeSection = self:CreateSection(tab, "Theme")
    
    self:CreateColorPicker(themeSection, "Accent Color", Theme.Accent, function(color)
        Theme.Accent = color
        self:RefreshTheme()
    end)
    
    local configSection = self:CreateSection(tab, "Configurations")
    
    self:CreateTextbox(configSection, "Config Name", "config", function(name)
        self.CurrentConfig = name
    end)
    
    self:CreateButton(configSection, "Save Config", function()
        if self.CurrentConfig then
            self:SaveConfig(self.CurrentConfig)
            self:Notify("Success", "Config saved: " .. self.CurrentConfig, 2)
        end
    end)
    
    self:CreateButton(configSection, "Load Config", function()
        if self.CurrentConfig then
            if self:LoadConfig(self.CurrentConfig) then
                self:Notify("Success", "Config loaded: " .. self.CurrentConfig, 2)
            else
                self:Notify("Error", "Failed to load config", 2)
            end
        end
    end)
    
    return tab
end

-- Config Management
function Library:SaveConfig(name)
    local config = {
        Theme = Theme,
        Widgets = {}
    }
    
    local success, err = pcall(function()
        if not isfolder(self.ConfigPath) then
            makefolder(self.ConfigPath:sub(1, -2))
        end
        
        writefile(self.ConfigPath .. name .. ".json", HttpService:JSONEncode(config))
    end)
    
    return success
end

function Library:LoadConfig(name)
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(self.ConfigPath .. name .. ".json"))
    end)
    
    if success and data then
        if data.Theme then
            Theme = data.Theme
            self:RefreshTheme()
        end
        return true
    end
    
    return false
end

-- Theme System
function Library:RefreshTheme()
    -- Refresh all UI elements with new theme
end

-- Cleanup
function Library:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

-- Initialize
return Library
